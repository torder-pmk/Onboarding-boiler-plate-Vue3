import { _ as __unplugin_components_0 } from './PanelGrids-ffc0170f.js';
import { v as defineComponent, a1 as computed, o as openBlock, e as createElementBlock, y as toDisplayString, z as unref, q as normalizeClass, cK as useStyleTag, l as normalizeStyle, c as createBlock, x as createBaseVNode, bL as useVModel, cJ as useNotification, cL as computedAsync, cH as useCopy, cM as useTimeAgo, a$ as ref, F as Fragment, u as createVNode, g as createCommentVNode, a9 as createTextVNode, h as withCtx, aC as isRef, ci as rpc, c6 as useDevToolsClient, bM as _sfc_main$9, bN as _sfc_main$a, r as resolveComponent, f as renderSlot, i as renderList, bJ as _sfc_main$c, cN as onKeyDown, cn as hookApi, c7 as rootPath, _ as __unplugin_components_7, cO as useDebounceFn } from './index-36a8f2c8.js';
import { _ as _sfc_main$d } from './DrawerRight.vue_vue_type_script_setup_true_lang-d7a700af.js';
import { _ as _sfc_main$b } from './TextInput.vue_vue_type_script_setup_true_lang-3d5cce68.js';
import { _ as _sfc_main$8 } from './IconButton.vue_vue_type_script_setup_true_lang-68ea38ae.js';
import { _ as __unplugin_components_3 } from './SectionBlock-90af9bd1.js';
import { F as Fuse } from './fuse.esm-c317b696.js';
import './IconTitle.vue_vue_type_script_setup_true_lang-2d6fc9fc.js';

const _hoisted_1$6 = ["title"];
const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  __name: "FilepathItem",
  props: {
    filepath: {},
    lineBreak: { type: Boolean },
    subpath: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const parsed = computed(
      () => ({ path: props.filepath })
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("button", {
        "font-mono": "",
        "hover:underline": "",
        class: normalizeClass(_ctx.lineBreak ? "" : "ws-nowrap of-hidden truncate"),
        title: _ctx.filepath
      }, toDisplayString(unref(parsed).path), 11, _hoisted_1$6);
    };
  }
});

/* Injected with object hook! */

const defaults = Object.freeze({
  ignoreUnknown: false,
  respectType: false,
  respectFunctionNames: false,
  respectFunctionProperties: false,
  unorderedObjects: true,
  unorderedArrays: false,
  unorderedSets: false,
  excludeKeys: void 0,
  excludeValues: void 0,
  replacer: void 0
});
function objectHash(object, options) {
  if (options) {
    options = { ...defaults, ...options };
  } else {
    options = defaults;
  }
  const hasher = createHasher(options);
  hasher.dispatch(object);
  return hasher.toString();
}
const defaultPrototypesKeys = Object.freeze([
  "prototype",
  "__proto__",
  "constructor"
]);
function createHasher(options) {
  let buff = "";
  let context = /* @__PURE__ */ new Map();
  const write = (str) => {
    buff += str;
  };
  return {
    toString() {
      return buff;
    },
    getContext() {
      return context;
    },
    dispatch(value) {
      if (options.replacer) {
        value = options.replacer(value);
      }
      const type = value === null ? "null" : typeof value;
      return this[type](value);
    },
    object(object) {
      if (object && typeof object.toJSON === "function") {
        return this.object(object.toJSON());
      }
      const objString = Object.prototype.toString.call(object);
      let objType = "";
      const objectLength = objString.length;
      if (objectLength < 10) {
        objType = "unknown:[" + objString + "]";
      } else {
        objType = objString.slice(8, objectLength - 1);
      }
      objType = objType.toLowerCase();
      let objectNumber = null;
      if ((objectNumber = context.get(object)) === void 0) {
        context.set(object, context.size);
      } else {
        return this.dispatch("[CIRCULAR:" + objectNumber + "]");
      }
      if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
        write("buffer:");
        return write(object.toString("utf8"));
      }
      if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
        if (this[objType]) {
          this[objType](object);
        } else if (!options.ignoreUnknown) {
          this.unkown(object, objType);
        }
      } else {
        let keys = Object.keys(object);
        if (options.unorderedObjects) {
          keys = keys.sort();
        }
        let extraKeys = [];
        if (options.respectType !== false && !isNativeFunction(object)) {
          extraKeys = defaultPrototypesKeys;
        }
        if (options.excludeKeys) {
          keys = keys.filter((key) => {
            return !options.excludeKeys(key);
          });
          extraKeys = extraKeys.filter((key) => {
            return !options.excludeKeys(key);
          });
        }
        write("object:" + (keys.length + extraKeys.length) + ":");
        const dispatchForKey = (key) => {
          this.dispatch(key);
          write(":");
          if (!options.excludeValues) {
            this.dispatch(object[key]);
          }
          write(",");
        };
        for (const key of keys) {
          dispatchForKey(key);
        }
        for (const key of extraKeys) {
          dispatchForKey(key);
        }
      }
    },
    array(arr, unordered) {
      unordered = unordered === void 0 ? options.unorderedArrays !== false : unordered;
      write("array:" + arr.length + ":");
      if (!unordered || arr.length <= 1) {
        for (const entry of arr) {
          this.dispatch(entry);
        }
        return;
      }
      const contextAdditions = /* @__PURE__ */ new Map();
      const entries = arr.map((entry) => {
        const hasher = createHasher(options);
        hasher.dispatch(entry);
        for (const [key, value] of hasher.getContext()) {
          contextAdditions.set(key, value);
        }
        return hasher.toString();
      });
      context = contextAdditions;
      entries.sort();
      return this.array(entries, false);
    },
    date(date) {
      return write("date:" + date.toJSON());
    },
    symbol(sym) {
      return write("symbol:" + sym.toString());
    },
    unkown(value, type) {
      write(type);
      if (!value) {
        return;
      }
      write(":");
      if (value && typeof value.entries === "function") {
        return this.array(
          Array.from(value.entries()),
          true
          /* ordered */
        );
      }
    },
    error(err) {
      return write("error:" + err.toString());
    },
    boolean(bool) {
      return write("bool:" + bool);
    },
    string(string) {
      write("string:" + string.length + ":");
      write(string);
    },
    function(fn) {
      write("fn:");
      if (isNativeFunction(fn)) {
        this.dispatch("[native]");
      } else {
        this.dispatch(fn.toString());
      }
      if (options.respectFunctionNames !== false) {
        this.dispatch("function-name:" + String(fn.name));
      }
      if (options.respectFunctionProperties) {
        this.object(fn);
      }
    },
    number(number) {
      return write("number:" + number);
    },
    xml(xml) {
      return write("xml:" + xml.toString());
    },
    null() {
      return write("Null");
    },
    undefined() {
      return write("Undefined");
    },
    regexp(regex) {
      return write("regex:" + regex.toString());
    },
    uint8array(arr) {
      write("uint8array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint8clampedarray(arr) {
      write("uint8clampedarray:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int8array(arr) {
      write("int8array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint16array(arr) {
      write("uint16array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int16array(arr) {
      write("int16array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint32array(arr) {
      write("uint32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int32array(arr) {
      write("int32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    float32array(arr) {
      write("float32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    float64array(arr) {
      write("float64array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    arraybuffer(arr) {
      write("arraybuffer:");
      return this.dispatch(new Uint8Array(arr));
    },
    url(url) {
      return write("url:" + url.toString());
    },
    map(map) {
      write("map:");
      const arr = [...map];
      return this.array(arr, options.unorderedSets !== false);
    },
    set(set) {
      write("set:");
      const arr = [...set];
      return this.array(arr, options.unorderedSets !== false);
    },
    file(file) {
      write("file:");
      return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
    },
    blob() {
      if (options.ignoreUnknown) {
        return write("[blob]");
      }
      throw new Error(
        'Hashing Blob objects is currently not supported\nUse "options.replacer" or "options.ignoreUnknown"\n'
      );
    },
    domwindow() {
      return write("domwindow");
    },
    bigint(number) {
      return write("bigint:" + number.toString());
    },
    /* Node.js standard native objects */
    process() {
      return write("process");
    },
    timer() {
      return write("timer");
    },
    pipe() {
      return write("pipe");
    },
    tcp() {
      return write("tcp");
    },
    udp() {
      return write("udp");
    },
    tty() {
      return write("tty");
    },
    statwatcher() {
      return write("statwatcher");
    },
    securecontext() {
      return write("securecontext");
    },
    connection() {
      return write("connection");
    },
    zlib() {
      return write("zlib");
    },
    context() {
      return write("context");
    },
    nodescript() {
      return write("nodescript");
    },
    httpparser() {
      return write("httpparser");
    },
    dataview() {
      return write("dataview");
    },
    signal() {
      return write("signal");
    },
    fsevent() {
      return write("fsevent");
    },
    tlswrap() {
      return write("tlswrap");
    }
  };
}
const nativeFunc = "[native code] }";
const nativeFuncLength = nativeFunc.length;
function isNativeFunction(f) {
  if (typeof f !== "function") {
    return false;
  }
  return Function.prototype.toString.call(f).slice(-nativeFuncLength) === nativeFunc;
}

class WordArray {
  constructor(words, sigBytes) {
    words = this.words = words || [];
    this.sigBytes = sigBytes === void 0 ? words.length * 4 : sigBytes;
  }
  toString(encoder) {
    return (encoder || Hex).stringify(this);
  }
  concat(wordArray) {
    this.clamp();
    if (this.sigBytes % 4) {
      for (let i = 0; i < wordArray.sigBytes; i++) {
        const thatByte = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
        this.words[this.sigBytes + i >>> 2] |= thatByte << 24 - (this.sigBytes + i) % 4 * 8;
      }
    } else {
      for (let j = 0; j < wordArray.sigBytes; j += 4) {
        this.words[this.sigBytes + j >>> 2] = wordArray.words[j >>> 2];
      }
    }
    this.sigBytes += wordArray.sigBytes;
    return this;
  }
  clamp() {
    this.words[this.sigBytes >>> 2] &= 4294967295 << 32 - this.sigBytes % 4 * 8;
    this.words.length = Math.ceil(this.sigBytes / 4);
  }
  clone() {
    return new WordArray([...this.words]);
  }
}
const Hex = {
  stringify(wordArray) {
    const hexChars = [];
    for (let i = 0; i < wordArray.sigBytes; i++) {
      const bite = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
      hexChars.push((bite >>> 4).toString(16), (bite & 15).toString(16));
    }
    return hexChars.join("");
  }
};
const Base64 = {
  stringify(wordArray) {
    const keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const base64Chars = [];
    for (let i = 0; i < wordArray.sigBytes; i += 3) {
      const byte1 = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
      const byte2 = wordArray.words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
      const byte3 = wordArray.words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
      const triplet = byte1 << 16 | byte2 << 8 | byte3;
      for (let j = 0; j < 4 && i * 8 + j * 6 < wordArray.sigBytes * 8; j++) {
        base64Chars.push(keyStr.charAt(triplet >>> 6 * (3 - j) & 63));
      }
    }
    return base64Chars.join("");
  }
};
const Latin1 = {
  parse(latin1Str) {
    const latin1StrLength = latin1Str.length;
    const words = [];
    for (let i = 0; i < latin1StrLength; i++) {
      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
    }
    return new WordArray(words, latin1StrLength);
  }
};
const Utf8 = {
  parse(utf8Str) {
    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
  }
};
class BufferedBlockAlgorithm {
  constructor() {
    this._data = new WordArray();
    this._nDataBytes = 0;
    this._minBufferSize = 0;
    this.blockSize = 512 / 32;
  }
  reset() {
    this._data = new WordArray();
    this._nDataBytes = 0;
  }
  _append(data) {
    if (typeof data === "string") {
      data = Utf8.parse(data);
    }
    this._data.concat(data);
    this._nDataBytes += data.sigBytes;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _doProcessBlock(_dataWords, _offset) {
  }
  _process(doFlush) {
    let processedWords;
    let nBlocksReady = this._data.sigBytes / (this.blockSize * 4);
    if (doFlush) {
      nBlocksReady = Math.ceil(nBlocksReady);
    } else {
      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    }
    const nWordsReady = nBlocksReady * this.blockSize;
    const nBytesReady = Math.min(nWordsReady * 4, this._data.sigBytes);
    if (nWordsReady) {
      for (let offset = 0; offset < nWordsReady; offset += this.blockSize) {
        this._doProcessBlock(this._data.words, offset);
      }
      processedWords = this._data.words.splice(0, nWordsReady);
      this._data.sigBytes -= nBytesReady;
    }
    return new WordArray(processedWords, nBytesReady);
  }
}
class Hasher extends BufferedBlockAlgorithm {
  update(messageUpdate) {
    this._append(messageUpdate);
    this._process();
    return this;
  }
  finalize(messageUpdate) {
    if (messageUpdate) {
      this._append(messageUpdate);
    }
  }
}

const H = [
  1779033703,
  -1150833019,
  1013904242,
  -1521486534,
  1359893119,
  -1694144372,
  528734635,
  1541459225
];
const K = [
  1116352408,
  1899447441,
  -1245643825,
  -373957723,
  961987163,
  1508970993,
  -1841331548,
  -1424204075,
  -670586216,
  310598401,
  607225278,
  1426881987,
  1925078388,
  -2132889090,
  -1680079193,
  -1046744716,
  -459576895,
  -272742522,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  -1740746414,
  -1473132947,
  -1341970488,
  -1084653625,
  -958395405,
  -710438585,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  -2117940946,
  -1838011259,
  -1564481375,
  -1474664885,
  -1035236496,
  -949202525,
  -778901479,
  -694614492,
  -200395387,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  -2067236844,
  -1933114872,
  -1866530822,
  -1538233109,
  -1090935817,
  -965641998
];
const W = [];
class SHA256 extends Hasher {
  constructor() {
    super(...arguments);
    this._hash = new WordArray([...H]);
  }
  reset() {
    super.reset();
    this._hash = new WordArray([...H]);
  }
  _doProcessBlock(M, offset) {
    const H2 = this._hash.words;
    let a = H2[0];
    let b = H2[1];
    let c = H2[2];
    let d = H2[3];
    let e = H2[4];
    let f = H2[5];
    let g = H2[6];
    let h = H2[7];
    for (let i = 0; i < 64; i++) {
      if (i < 16) {
        W[i] = M[offset + i] | 0;
      } else {
        const gamma0x = W[i - 15];
        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
        const gamma1x = W[i - 2];
        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
      }
      const ch = e & f ^ ~e & g;
      const maj = a & b ^ a & c ^ b & c;
      const sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
      const sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
      const t1 = h + sigma1 + ch + K[i] + W[i];
      const t2 = sigma0 + maj;
      h = g;
      g = f;
      f = e;
      e = d + t1 | 0;
      d = c;
      c = b;
      b = a;
      a = t1 + t2 | 0;
    }
    H2[0] = H2[0] + a | 0;
    H2[1] = H2[1] + b | 0;
    H2[2] = H2[2] + c | 0;
    H2[3] = H2[3] + d | 0;
    H2[4] = H2[4] + e | 0;
    H2[5] = H2[5] + f | 0;
    H2[6] = H2[6] + g | 0;
    H2[7] = H2[7] + h | 0;
  }
  finalize(messageUpdate) {
    super.finalize(messageUpdate);
    const nBitsTotal = this._nDataBytes * 8;
    const nBitsLeft = this._data.sigBytes * 8;
    this._data.words[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(
      nBitsTotal / 4294967296
    );
    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
    this._data.sigBytes = this._data.words.length * 4;
    this._process();
    return this._hash;
  }
}
function sha256base64(message) {
  return new SHA256().finalize(message).toString(Base64);
}

function hash(object, options = {}) {
  const hashed = typeof object === "string" ? object : objectHash(object, options);
  return sha256base64(hashed).slice(0, 10);
}

/* Injected with object hook! */

const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  __name: "AssetFontPreview",
  props: {
    asset: {}
  },
  setup(__props) {
    const props = __props;
    const id = computed(() => `devtools-assets-${hash(props.asset)}`);
    useStyleTag(computed(() => `
  @font-face {
    font-family: '${id.value}';
    src: url('${props.asset.publicPath}');
  }
`));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        "of-hidden": "",
        style: normalizeStyle({ fontFamily: `'${unref(id)}'` })
      }, " Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz ", 4);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$5 = {
  flex: "",
  "items-center": "",
  "justify-center": "",
  "of-hidden": "",
  "bg-active": "",
  "object-cover": "",
  p1: ""
};
const _hoisted_2$3 = ["src"];
const _hoisted_3$2 = {
  key: 2,
  "i-carbon-document": "",
  "text-3xl": "",
  op20: ""
};
const _hoisted_4$2 = {
  key: 3,
  "w-full": "",
  "self-start": "",
  p4: ""
};
const _hoisted_5$2 = ["textContent"];
const _hoisted_6$2 = { key: 4 };
const _hoisted_7$2 = ["src", "autoplay", "controls"];
const _hoisted_8$2 = { key: 5 };
const _hoisted_9$1 = ["src", "autoplay", "controls"];
const _hoisted_10$1 = {
  key: 1,
  "i-carbon:volume-up": "",
  "text-3xl": "",
  op20: ""
};
const _hoisted_11$1 = {
  key: 6,
  "i-carbon-help": "",
  "text-3xl": "",
  op20: ""
};
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "AssetPreview",
  props: {
    asset: {},
    textContent: {},
    detail: { type: Boolean }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_AssetFontPreview = _sfc_main$6;
      return openBlock(), createElementBlock("div", _hoisted_1$5, [
        _ctx.asset.type === "image" ? (openBlock(), createElementBlock("img", {
          key: 0,
          src: _ctx.asset.publicPath
        }, null, 8, _hoisted_2$3)) : _ctx.asset.type === "font" ? (openBlock(), createBlock(_component_AssetFontPreview, {
          key: _ctx.asset.publicPath,
          asset: _ctx.asset,
          "self-stretch": "",
          p2: "",
          "text-2xl": ""
        }, null, 8, ["asset"])) : _ctx.asset.type === "text" && !_ctx.textContent ? (openBlock(), createElementBlock("div", _hoisted_3$2)) : _ctx.asset.type === "text" && _ctx.textContent ? (openBlock(), createElementBlock("div", _hoisted_4$2, [
          createBaseVNode("pre", {
            "max-h-10rem": "",
            "of-hidden": "",
            "text-xs": "",
            "font-mono": "",
            textContent: toDisplayString(_ctx.textContent)
          }, null, 8, _hoisted_5$2)
        ])) : _ctx.asset.type === "video" ? (openBlock(), createElementBlock("div", _hoisted_6$2, [
          createBaseVNode("video", {
            src: _ctx.asset.publicPath,
            autoplay: _ctx.detail,
            controls: _ctx.detail
          }, null, 8, _hoisted_7$2)
        ])) : _ctx.asset.type === "audio" ? (openBlock(), createElementBlock("div", _hoisted_8$2, [
          _ctx.detail ? (openBlock(), createElementBlock("audio", {
            key: 0,
            src: _ctx.asset.publicPath,
            autoplay: _ctx.detail,
            controls: _ctx.detail
          }, null, 8, _hoisted_9$1)) : (openBlock(), createElementBlock("div", _hoisted_10$1))
        ])) : (openBlock(), createElementBlock("div", _hoisted_11$1))
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$4 = {
  flex: "~ col gap-4",
  "min-h-full": "",
  "w-full": "",
  "of-hidden": "",
  p4: ""
};
const _hoisted_2$2 = /* @__PURE__ */ createBaseVNode("div", {
  flex: "~ gap2",
  "mb--2": "",
  "items-center": "",
  op50: ""
}, [
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" }),
  /* @__PURE__ */ createBaseVNode("div", { "flex-none": "" }, " Preview "),
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" })
], -1);
const _hoisted_3$1 = {
  flex: "~",
  "items-center": "",
  "justify-center": ""
};
const _hoisted_4$1 = /* @__PURE__ */ createBaseVNode("div", {
  flex: "~ gap2",
  "mb--2": "",
  "items-center": "",
  op50: ""
}, [
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" }),
  /* @__PURE__ */ createBaseVNode("div", { "flex-none": "" }, " Details "),
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" })
], -1);
const _hoisted_5$1 = {
  "max-w-full": "",
  "w-full": "",
  "table-fixed": ""
};
const _hoisted_6$1 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Filepath ", -1);
const _hoisted_7$1 = {
  flex: "~ gap-1",
  "w-full": "",
  "items-center": ""
};
const _hoisted_8$1 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Public Path ", -1);
const _hoisted_9 = {
  flex: "~ gap-1",
  "w-full": "",
  "items-center": "",
  "of-hidden": ""
};
const _hoisted_10 = {
  "flex-auto": "",
  "of-hidden": "",
  truncate: "",
  "ws-pre": "",
  "font-mono": ""
};
const _hoisted_11 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Type ", -1);
const _hoisted_12 = { capitalize: "" };
const _hoisted_13 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Image Size ", -1);
const _hoisted_14 = { key: 0 };
const _hoisted_15 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Aspect Ratio ", -1);
const _hoisted_16 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " File size ", -1);
const _hoisted_17 = /* @__PURE__ */ createBaseVNode("td", {
  "w-30": "",
  "ws-nowrap": "",
  pr5: "",
  "text-right": "",
  op50: ""
}, " Last modified ", -1);
const _hoisted_18 = { op70: "" };
const _hoisted_19 = /* @__PURE__ */ createBaseVNode("div", {
  flex: "~ gap2",
  "mb--2": "",
  "items-center": "",
  op50: ""
}, [
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" }),
  /* @__PURE__ */ createBaseVNode("div", { "flex-none": "" }, " Actions "),
  /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" })
], -1);
const _hoisted_20 = { flex: "~ gap2 wrap" };
const _hoisted_21 = /* @__PURE__ */ createBaseVNode("div", { "flex-auto": "" }, null, -1);
const _hoisted_22 = {
  flex: "~ col gap-4",
  "min-h-full": "",
  "w-full": "",
  "of-hidden": "",
  p8: ""
};
const _hoisted_23 = /* @__PURE__ */ createBaseVNode("span", null, " Are you sure you want to delete this asset? ", -1);
const _hoisted_24 = { flex: "~ gap2 wrap justify-center" };
const _hoisted_25 = {
  flex: "~ col gap-4",
  "min-h-full": "",
  "w-full": "",
  "of-hidden": "",
  p8: ""
};
const _hoisted_26 = { flex: "~ gap2 wrap justify-center" };
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "AssetDetails",
  props: {
    modelValue: {}
  },
  setup(__props, { emit }) {
    const props = __props;
    const asset = useVModel(props, "modelValue", emit, { passive: true });
    const showNotification = useNotification();
    const origin = window.parent.location.origin;
    const imageMeta = computedAsync(() => {
      if (asset.value.type !== "image")
        return void 0;
      return rpc.getImageMeta(asset.value.filePath);
    });
    const textContent = computedAsync(() => {
      if (asset.value.type !== "text")
        return void 0;
      return rpc.getTextAssetContent(asset.value.filePath);
    });
    const copy = useCopy();
    const timeAgo = useTimeAgo(() => asset.value.mtime);
    const fileSize = computed(() => {
      const size = asset.value.size;
      if (size < 1024)
        return `${size} B`;
      if (size < 1024 * 1024)
        return `${(size / 1024).toFixed(2)} KB`;
      return `${(size / 1024 / 1024).toFixed(2)} MB`;
    });
    const aspectRatio = computed(() => {
      if (!imageMeta.value?.width || !imageMeta.value?.height)
        return "";
      const gcd = (a, b) => {
        if (!b)
          return a;
        return gcd(b, a % b);
      };
      const ratio = gcd(imageMeta.value.width, imageMeta.value.height);
      if (ratio > 3)
        return `${imageMeta.value.width / ratio}:${imageMeta.value.height / ratio}`;
      return "";
    });
    const supportsPreview = computed(() => {
      return [
        "image",
        "text",
        "video",
        "audio",
        "font"
      ].includes(asset.value.type);
    });
    const deleteDialog = ref(false);
    async function deleteAsset() {
      try {
        await rpc.deleteStaticAsset(asset.value.filePath);
        asset.value = void 0;
        deleteDialog.value = false;
        showNotification({
          text: "Asset deleted",
          icon: "carbon-checkmark",
          type: "primary"
        });
      } catch (error) {
        deleteDialog.value = false;
        showNotification({
          text: "Something went wrong!",
          icon: "carbon-warning",
          type: "error"
        });
      }
    }
    const renameDialog = ref(false);
    const newName = ref("");
    async function renameAsset() {
      const parts = asset.value.filePath.split("/");
      const oldName = parts.slice(-1)[0].split(".").slice(0, -1).join(".");
      if (!newName.value || newName.value === oldName) {
        return showNotification({
          text: "Please enter a new name",
          icon: "carbon-warning",
          type: "error"
        });
      }
      try {
        const extension = parts.slice(-1)[0].split(".").slice(-1)[0];
        const fullPath = `${parts.slice(0, -1).join("/")}/${newName.value}.${extension}`;
        await rpc.renameStaticAsset(asset.value.filePath, fullPath);
        asset.value = void 0;
        renameDialog.value = false;
        showNotification({
          text: "Asset renamed",
          icon: "carbon-checkmark",
          type: "primary"
        });
      } catch (error) {
        showNotification({
          text: "Something went wrong!",
          icon: "carbon-warning",
          type: "error"
        });
      }
    }
    const client = useDevToolsClient();
    return (_ctx, _cache) => {
      const _component_AssetPreview = _sfc_main$5;
      const _component_FilepathItem = _sfc_main$7;
      const _component_VDIconButton = _sfc_main$8;
      const _component_VDButton = _sfc_main$9;
      const _component_VDDialog = _sfc_main$a;
      const _component_VDTextInput = _sfc_main$b;
      return openBlock(), createElementBlock("div", _hoisted_1$4, [
        unref(supportsPreview) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          _hoisted_2$2,
          createBaseVNode("div", _hoisted_3$1, [
            createVNode(_component_AssetPreview, {
              border: "~ base",
              detail: "",
              "max-h-80": "",
              "min-h-20": "",
              "min-w-20": "",
              "w-auto": "",
              rounded: "",
              asset: unref(asset),
              "text-content": unref(textContent)
            }, null, 8, ["asset", "text-content"])
          ])
        ], 64)) : createCommentVNode("", true),
        _hoisted_4$1,
        createBaseVNode("table", _hoisted_5$1, [
          createBaseVNode("tbody", null, [
            createBaseVNode("tr", null, [
              _hoisted_6$1,
              createBaseVNode("td", null, [
                createBaseVNode("div", _hoisted_7$1, [
                  createVNode(_component_FilepathItem, {
                    filepath: unref(asset).filePath,
                    "text-left": ""
                  }, null, 8, ["filepath"]),
                  createVNode(_component_VDIconButton, {
                    "flex-none": "",
                    title: "Open in Editor",
                    icon: "carbon-launch",
                    onClick: _cache[0] || (_cache[0] = ($event) => unref(client).openInEditor(unref(asset).filePath))
                  })
                ])
              ])
            ]),
            createBaseVNode("tr", null, [
              _hoisted_8$1,
              createBaseVNode("td", null, [
                createBaseVNode("div", _hoisted_9, [
                  createBaseVNode("div", _hoisted_10, toDisplayString(unref(asset).publicPath), 1),
                  createVNode(_component_VDIconButton, {
                    "flex-none": "",
                    title: "Copy public path",
                    icon: "carbon-copy",
                    onClick: _cache[1] || (_cache[1] = ($event) => unref(copy)(unref(asset).publicPath))
                  }),
                  createVNode(_component_VDIconButton, {
                    "flex-none": "",
                    to: `${unref(origin)}${unref(asset).publicPath}`,
                    icon: "carbon-launch",
                    target: "_blank",
                    title: "Open in browser"
                  }, null, 8, ["to"])
                ])
              ])
            ]),
            createBaseVNode("tr", null, [
              _hoisted_11,
              createBaseVNode("td", _hoisted_12, toDisplayString(unref(asset).type), 1)
            ]),
            unref(imageMeta)?.width ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createBaseVNode("tr", null, [
                _hoisted_13,
                createBaseVNode("td", null, toDisplayString(unref(imageMeta).width) + " x " + toDisplayString(unref(imageMeta).height), 1)
              ]),
              unref(aspectRatio) ? (openBlock(), createElementBlock("tr", _hoisted_14, [
                _hoisted_15,
                createBaseVNode("td", null, toDisplayString(unref(aspectRatio)), 1)
              ])) : createCommentVNode("", true)
            ], 64)) : createCommentVNode("", true),
            createBaseVNode("tr", null, [
              _hoisted_16,
              createBaseVNode("td", null, toDisplayString(unref(fileSize)), 1)
            ]),
            createBaseVNode("tr", null, [
              _hoisted_17,
              createBaseVNode("td", null, [
                createTextVNode(toDisplayString(new Date(unref(asset).mtime).toLocaleString()) + " ", 1),
                createBaseVNode("span", _hoisted_18, "(" + toDisplayString(unref(timeAgo)) + ")", 1)
              ])
            ])
          ])
        ]),
        _hoisted_19,
        createBaseVNode("div", _hoisted_20, [
          createVNode(_component_VDButton, {
            to: `${unref(origin)}${unref(asset).publicPath}`,
            download: "",
            target: "_blank",
            icon: "carbon-download",
            n: "green"
          }, {
            default: withCtx(() => [
              createTextVNode(" Download ")
            ]),
            _: 1
          }, 8, ["to"]),
          createVNode(_component_VDButton, {
            icon: "carbon-text-annotation-toggle",
            n: "blue",
            onClick: _cache[2] || (_cache[2] = ($event) => renameDialog.value = !unref(renameDialog))
          }, {
            default: withCtx(() => [
              createTextVNode(" Rename ")
            ]),
            _: 1
          }),
          createVNode(_component_VDButton, {
            icon: "carbon-delete",
            n: "red",
            onClick: _cache[3] || (_cache[3] = ($event) => deleteDialog.value = !unref(deleteDialog))
          }, {
            default: withCtx(() => [
              createTextVNode(" Delete ")
            ]),
            _: 1
          })
        ]),
        _hoisted_21,
        createVNode(_component_VDDialog, {
          modelValue: unref(deleteDialog),
          "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => isRef(deleteDialog) ? deleteDialog.value = $event : null),
          onClose: _cache[6] || (_cache[6] = ($event) => deleteDialog.value = false)
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_22, [
              _hoisted_23,
              createBaseVNode("div", _hoisted_24, [
                createVNode(_component_VDButton, {
                  icon: "carbon-close",
                  onClick: _cache[4] || (_cache[4] = ($event) => deleteDialog.value = false)
                }, {
                  default: withCtx(() => [
                    createTextVNode(" Cancel ")
                  ]),
                  _: 1
                }),
                createVNode(_component_VDButton, {
                  icon: "carbon-delete",
                  n: "red",
                  onClick: deleteAsset
                }, {
                  default: withCtx(() => [
                    createTextVNode(" Delete ")
                  ]),
                  _: 1
                })
              ])
            ])
          ]),
          _: 1
        }, 8, ["modelValue"]),
        createVNode(_component_VDDialog, {
          modelValue: unref(renameDialog),
          "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => isRef(renameDialog) ? renameDialog.value = $event : null),
          onClose: _cache[10] || (_cache[10] = ($event) => deleteDialog.value = false)
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_25, [
              createVNode(_component_VDTextInput, {
                modelValue: unref(newName),
                "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => isRef(newName) ? newName.value = $event : null),
                placeholder: "New name",
                n: "blue"
              }, null, 8, ["modelValue"]),
              createBaseVNode("div", _hoisted_26, [
                createVNode(_component_VDButton, {
                  icon: "carbon-close",
                  onClick: _cache[8] || (_cache[8] = ($event) => renameDialog.value = false)
                }, {
                  default: withCtx(() => [
                    createTextVNode(" Cancel ")
                  ]),
                  _: 1
                }),
                createVNode(_component_VDButton, {
                  icon: "carbon-text-annotation-toggle",
                  n: "blue",
                  onClick: renameAsset
                }, {
                  default: withCtx(() => [
                    createTextVNode(" Rename ")
                  ]),
                  _: 1
                })
              ])
            ])
          ]),
          _: 1
        }, 8, ["modelValue"])
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$3 = /* @__PURE__ */ createBaseVNode("div", { "x-divider": "" }, null, -1);
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "AssetListItem",
  props: {
    item: {},
    index: { default: 0 },
    modelValue: {}
  },
  setup(__props, { emit }) {
    const props = __props;
    const model = useVModel(props, "modelValue", emit, { passive: true });
    const isCollection = computed(() => props.item?.children?.length);
    const open = ref(true);
    const icon = computed(() => {
      if (isCollection.value)
        return "i-carbon-folder";
      const assets = {
        image: "i-carbon-image",
        video: "i-carbon-video",
        audio: "i-carbon-volume-up",
        font: "i-carbon-text-small-caps",
        text: "i-carbon-document",
        json: "i-carbon-json"
      };
      return assets[props.item.type] ?? "i-carbon-document-blank";
    });
    return (_ctx, _cache) => {
      const _component_VDIcon = _sfc_main$c;
      const _component_AssetListItem = resolveComponent("AssetListItem", true);
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("button", {
          flex: "~ gap-2",
          "w-full": "",
          "items-center": "",
          hover: "bg-active",
          px4: "",
          py1: "",
          style: normalizeStyle({ paddingLeft: `calc(1rem + ${_ctx.index * 1.5}em)` }),
          class: normalizeClass({ "bg-active": !unref(isCollection) && unref(model)?.filePath === _ctx.item?.filePath }),
          onClick: _cache[0] || (_cache[0] = ($event) => unref(isCollection) ? open.value = !unref(open) : model.value = _ctx.item)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(icon))
          }, null, 2),
          createBaseVNode("span", {
            class: normalizeClass({ "flex items-center": unref(isCollection) }),
            "flex-auto": "",
            "text-start": "",
            "text-sm": "",
            "font-mono": ""
          }, toDisplayString(_ctx.item.path), 3),
          unref(isCollection) ? (openBlock(), createBlock(_component_VDIcon, {
            key: 0,
            icon: "carbon:chevron-right",
            "transform-rotate": unref(open) ? 90 : 0,
            transition: ""
          }, null, 8, ["transform-rotate"])) : createCommentVNode("", true)
        ], 6),
        _hoisted_1$3,
        unref(open) ? renderSlot(_ctx.$slots, "default", { key: 0 }, () => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.item?.children, (subItem) => {
            return openBlock(), createBlock(_component_AssetListItem, {
              key: subItem.filepath,
              modelValue: unref(model),
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(model) ? model.value = $event : null),
              item: subItem,
              index: _ctx.index + 1
            }, null, 8, ["modelValue", "item", "index"]);
          }), 128))
        ]) : createCommentVNode("", true)
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$2 = {
  flex: "~ col gap-1",
  hover: "bg-active",
  "items-center": "",
  "of-hidden": "",
  rounded: "",
  p2: ""
};
const _hoisted_2$1 = {
  "w-full": "",
  "of-hidden": "",
  truncate: "",
  "ws-nowrap": "",
  "text-center": "",
  "text-xs": ""
};
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "AssetGridItem",
  props: {
    asset: {},
    folder: {}
  },
  setup(__props) {
    const props = __props;
    const path = computed(() => {
      if (props.folder && props.asset.path.startsWith(props.folder))
        return props.asset.path.slice(props.folder.length);
      return props.asset.path;
    });
    return (_ctx, _cache) => {
      const _component_AssetPreview = _sfc_main$5;
      return openBlock(), createElementBlock("button", _hoisted_1$2, [
        createVNode(_component_AssetPreview, {
          "h-30": "",
          "w-30": "",
          rounded: "",
          border: "~ base",
          asset: _ctx.asset
        }, null, 8, ["asset"]),
        createBaseVNode("div", _hoisted_2$1, toDisplayString(unref(path)), 1)
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$1 = { flex: "~ gap4" };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "Navbar",
  props: {
    search: {
      type: String,
      default: void 0
    },
    noPadding: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:search"],
  setup(__props, { emit }) {
    function update(event) {
      emit("update:search", event.target.value);
    }
    return (_ctx, _cache) => {
      const _component_VDTextInput = _sfc_main$b;
      return openBlock(), createElementBlock("div", {
        flex: "~ col gap2",
        border: "b base",
        "flex-1": "",
        "navbar-glass": "",
        class: normalizeClass([{ p4: !__props.noPadding }])
      }, [
        createBaseVNode("div", _hoisted_1$1, [
          renderSlot(_ctx.$slots, "search", {}, () => [
            createVNode(_component_VDTextInput, {
              placeholder: "Search...",
              icon: "carbon-search",
              n: "primary",
              "flex-auto": "",
              class: normalizeClass({ "px-5 py-2": !__props.noPadding }),
              value: __props.search,
              onInput: update
            }, null, 8, ["class", "value"])
          ]),
          renderSlot(_ctx.$slots, "actions")
        ]),
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1 = {
  key: 0,
  "h-full": "",
  "of-auto": "",
  "n-panel-grids": ""
};
const _hoisted_2 = {
  "flex-none": "",
  flex: "~ gap4"
};
const _hoisted_3 = { op50: "" };
const _hoisted_4 = { key: 0 };
const _hoisted_5 = {
  "mt--4": "",
  px2: "",
  grid: "~ cols-minmax-8rem"
};
const _hoisted_6 = {
  key: 1,
  p2: "",
  grid: "~ cols-minmax-8rem"
};
const _hoisted_7 = { key: 1 };
const _hoisted_8 = /* @__PURE__ */ createBaseVNode("h1", {
  "text-sm": "",
  italic: "",
  op50: ""
}, " No Assets ", -1);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "assets",
  setup(__props) {
    function useAssets() {
      const assets2 = ref([]);
      getAssets();
      const debounceAssets = useDebounceFn(() => {
        getAssets();
      }, 100);
      async function getAssets() {
        assets2.value = await rpc.staticAssets();
      }
      hookApi.hook.on("__vue-devtools:file-watch", ({ event, path }) => {
        if (path.startsWith(rootPath) && ["add", "unlink"].includes(event))
          debounceAssets();
      });
      return { assets: assets2 };
    }
    const { assets } = useAssets();
    const search = ref("");
    const fuse = computed(() => new Fuse(assets.value || [], {
      keys: [
        "path"
      ]
    }));
    const filtered = computed(() => {
      const result = search.value ? fuse.value.search(search.value).map((i) => i.item) : assets.value || [];
      return result;
    });
    const byFolders = computed(() => {
      const result = {};
      for (const asset of filtered.value) {
        const folder = `${asset.path.split("/").slice(0, -1).join("/")}/`;
        if (!result[folder])
          result[folder] = [];
        result[folder].push(asset);
      }
      return Object.entries(result).sort(([a], [b]) => a.localeCompare(b));
    });
    const byTree = computed(() => {
      const root = { path: "public", children: [] };
      const addToTree = (node, pathParts, file) => {
        const [currentPart, ...remainingParts] = pathParts;
        let child = node.children.find((child2) => child2.path === currentPart);
        if (!child) {
          child = { ...file, path: currentPart, children: [] };
          node.children.push(child);
        }
        if (remainingParts.length > 1)
          addToTree(child, remainingParts, file);
        else if (remainingParts.length === 1)
          child.children.push({ ...file, path: remainingParts[0] });
      };
      filtered.value.forEach((file) => {
        const pathParts = file.path.split("/").filter((part) => part !== "");
        addToTree(root, pathParts, file);
      });
      return root.children;
    });
    const selected = ref();
    const view = ref("grid");
    function toggleView() {
      view.value = view.value === "list" ? "grid" : "list";
    }
    onKeyDown("Escape", () => {
      selected.value = void 0;
    });
    const navbar = ref();
    return (_ctx, _cache) => {
      const _component_VDIcon = _sfc_main$c;
      const _component_Navbar = _sfc_main$1;
      const _component_AssetGridItem = _sfc_main$2;
      const _component_VDSectionBlock = __unplugin_components_3;
      const _component_AssetListItem = _sfc_main$3;
      const _component_AssetDetails = _sfc_main$4;
      const _component_DrawerRight = _sfc_main$d;
      const _component_VDCard = __unplugin_components_7;
      const _component_VDPanelGrids = __unplugin_components_0;
      return unref(assets)?.length ? (openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(_component_Navbar, {
          ref_key: "navbar",
          ref: navbar,
          search: unref(search),
          "onUpdate:search": _cache[0] || (_cache[0] = ($event) => isRef(search) ? search.value = $event : null),
          pb2: ""
        }, {
          actions: withCtx(() => [
            createBaseVNode("div", _hoisted_2, [
              createBaseVNode("button", {
                title: "Toggle view",
                onClick: toggleView
              }, [
                unref(view) === "grid" ? (openBlock(), createBlock(_component_VDIcon, {
                  key: 0,
                  icon: "i-carbon-list"
                })) : (openBlock(), createBlock(_component_VDIcon, {
                  key: 1,
                  icon: "i-carbon-grid"
                }))
              ])
            ])
          ]),
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_3, [
              unref(search) ? (openBlock(), createElementBlock("span", _hoisted_4, toDisplayString(unref(filtered).length) + " matched · ", 1)) : createCommentVNode("", true),
              createBaseVNode("span", null, toDisplayString(unref(assets)?.length) + " assets in total", 1)
            ])
          ]),
          _: 1
        }, 8, ["search"]),
        unref(view) === "grid" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          unref(byFolders).length > 1 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(byFolders), ([folder, items]) => {
            return openBlock(), createBlock(_component_VDSectionBlock, {
              key: folder,
              text: folder,
              description: `${items.length} items`,
              open: items.length <= 20,
              padding: false
            }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_5, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(items, (a) => {
                    return openBlock(), createBlock(_component_AssetGridItem, {
                      key: a.path,
                      asset: a,
                      folder,
                      onClick: ($event) => selected.value = a
                    }, null, 8, ["asset", "folder", "onClick"]);
                  }), 128))
                ])
              ]),
              _: 2
            }, 1032, ["text", "description", "open"]);
          }), 128)) : (openBlock(), createElementBlock("div", _hoisted_6, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(filtered), (a) => {
              return openBlock(), createBlock(_component_AssetGridItem, {
                key: a.path,
                asset: a,
                onClick: ($event) => selected.value = a
              }, null, 8, ["asset", "onClick"]);
            }), 128))
          ]))
        ], 64)) : (openBlock(), createElementBlock("div", _hoisted_7, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(byTree), (item, key) => {
            return openBlock(), createBlock(_component_AssetListItem, {
              key,
              modelValue: unref(selected),
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(selected) ? selected.value = $event : null),
              item
            }, null, 8, ["modelValue", "item"]);
          }), 128))
        ])),
        createVNode(_component_DrawerRight, {
          "model-value": !!unref(selected),
          "auto-close": "",
          "w-120": "",
          navbar: unref(navbar),
          onClose: _cache[3] || (_cache[3] = ($event) => selected.value = void 0)
        }, {
          default: withCtx(() => [
            unref(selected) ? (openBlock(), createBlock(_component_AssetDetails, {
              key: 0,
              modelValue: unref(selected),
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => isRef(selected) ? selected.value = $event : null)
            }, null, 8, ["modelValue"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["model-value", "navbar"])
      ])) : (openBlock(), createBlock(_component_VDPanelGrids, {
        key: 1,
        px5: ""
      }, {
        default: withCtx(() => [
          createVNode(_component_VDCard, {
            flex: "~ col gap2",
            "min-w-30": "",
            "items-center": "",
            p3: ""
          }, {
            default: withCtx(() => [
              _hoisted_8
            ]),
            _: 1
          })
        ]),
        _: 1
      }));
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

export { _sfc_main as default };
