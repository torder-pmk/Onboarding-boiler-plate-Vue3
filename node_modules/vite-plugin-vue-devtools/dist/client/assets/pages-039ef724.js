import { _ as __unplugin_components_3 } from './SectionBlock-90af9bd1.js';
import { _ as _sfc_main$7 } from './DrawerRight.vue_vue_type_script_setup_true_lang-d7a700af.js';
import { U as Uu } from './jse-theme-dark-2b1853c1.js';
import { v as defineComponent, cc as useColorMode, a1 as computed, o as openBlock, e as createElementBlock, u as createVNode, z as unref, aC as isRef, q as normalizeClass, a$ as ref, r as resolveComponent, x as createBaseVNode, y as toDisplayString, c as createBlock, h as withCtx, bG as withModifiers, F as Fragment, i as renderList, g as createCommentVNode, a9 as createTextVNode, bM as _sfc_main$6, bL as useVModel, f as renderSlot, P as Transition, cd as tryGetAllMetaKeys, ce as useStorage, by as watch, cf as onClickOutside, d as withDirectives, bq as vModelCheckbox, c4 as __unplugin_components_1, aP as onMounted, cg as currentRoute, b$ as router, bE as withKeys, ch as routes } from './index-36a8f2c8.js';
import { _ as _sfc_main$5 } from './TextInput.vue_vue_type_script_setup_true_lang-3d5cce68.js';
import './IconTitle.vue_vue_type_script_setup_true_lang-2d6fc9fc.js';
import './IconButton.vue_vue_type_script_setup_true_lang-68ea38ae.js';

const _hoisted_1$3 = {
  "h-full": "",
  "select-none": "",
  "overflow-scroll": "",
  "p-2": "",
  class: "no-scrollbar"
};
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "RouteMetaDetail",
  props: {
    meta: {}
  },
  setup(__props) {
    const props = __props;
    const colorMode = useColorMode();
    const meta = computed(() => props.meta);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createVNode(unref(Uu), {
          modelValue: unref(meta),
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(meta) ? meta.value = $event : null),
          "h-full": "",
          class: normalizeClass(["json-editor-vue", [
            unref(colorMode) === "dark" ? "jse-theme-dark" : ""
          ]]),
          "main-menu-bar": false,
          "navigation-bar": false,
          "status-bar": false,
          "read-only": true,
          indentation: 2,
          "tab-size": 2
        }, null, 8, ["modelValue", "class"])
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$2 = {
  block: "",
  "cursor-pointer": ""
};
const _hoisted_2$2 = { p2: "" };
const _hoisted_3$2 = ["onSubmit"];
const _hoisted_4$2 = /* @__PURE__ */ createBaseVNode("div", {
  px2: "",
  "text-sm": "",
  op50: ""
}, " Fill params and navigate: ", -1);
const _hoisted_5$2 = {
  flex: "~",
  "items-center": "",
  p2: "",
  "text-sm": "",
  "font-mono": ""
};
const _hoisted_6$2 = { key: 1 };
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "RoutePathItem",
  props: {
    route: {}
  },
  emits: ["navigate"],
  setup(__props, { emit }) {
    const props = __props;
    function parseExpressRoute(route) {
      return route.split(/(:\w+[\?\*]?)/).filter(Boolean);
    }
    const partsInput = ref([]);
    const parts = computed(() => {
      const _ = parseExpressRoute(props.route.path);
      partsInput.value = Array.from({ length: _.length }, () => "");
      return _;
    });
    const path = computed(() => parts.value.map((i, idx) => i[0] === ":" ? partsInput.value[idx] : i).join("").replace(/\/+/g, "/"));
    const hasWildcard = computed(() => props.route.path.includes(":"));
    function navigate() {
      emit("navigate", path.value);
    }
    return (_ctx, _cache) => {
      const _component_VDTextInput = _sfc_main$5;
      const _component_VDButton = _sfc_main$6;
      const _component_VDropdown = resolveComponent("VDropdown");
      return !unref(hasWildcard) ? (openBlock(), createElementBlock("button", {
        key: 0,
        onClick: navigate
      }, [
        createBaseVNode("code", null, toDisplayString(_ctx.route.path), 1)
      ])) : (openBlock(), createBlock(_component_VDropdown, { key: 1 }, {
        popper: withCtx(({ hide }) => [
          createBaseVNode("div", _hoisted_2$2, [
            createBaseVNode("form", {
              flex: "~ col",
              onSubmit: withModifiers(() => {
                navigate();
                hide();
              }, ["prevent"])
            }, [
              unref(hasWildcard) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                _hoisted_4$2,
                createBaseVNode("div", _hoisted_5$2, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(parts), (part, idx) => {
                    return openBlock(), createElementBlock(Fragment, { key: idx }, [
                      part[0] === ":" ? (openBlock(), createBlock(_component_VDTextInput, {
                        key: 0,
                        modelValue: unref(partsInput)[idx],
                        "onUpdate:modelValue": ($event) => unref(partsInput)[idx] = $event,
                        "w-20": "",
                        "n-sm": "",
                        placeholder: part.slice(1)
                      }, null, 8, ["modelValue", "onUpdate:modelValue", "placeholder"])) : (openBlock(), createElementBlock("span", _hoisted_6$2, toDisplayString(part), 1))
                    ], 64);
                  }), 128))
                ])
              ], 64)) : createCommentVNode("", true),
              createVNode(_component_VDButton, {
                block: "",
                n: "primary"
              }, {
                default: withCtx(() => [
                  createTextVNode(" Navigate ")
                ]),
                _: 1
              })
            ], 40, _hoisted_3$2)
          ])
        ]),
        default: withCtx(() => [
          createBaseVNode("code", _hoisted_1$2, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(parts), (part, idx) => {
              return openBlock(), createElementBlock("span", {
                key: idx,
                class: normalizeClass(part[0] === ":" ? "text-gray border border-dashed rounded border-gray:50 px1" : "")
              }, toDisplayString(part[0] === ":" ? part.slice(1) : part), 3);
            }), 128))
          ])
        ]),
        _: 1
      }));
    };
  }
});

/* Injected with object hook! */

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "Dropdown",
  props: {
    show: { type: Boolean },
    items: {},
    position: { default: "left" }
  },
  emits: ["update:show"],
  setup(__props, { emit }) {
    const props = __props;
    const show = useVModel(props, "show", emit, { passive: true });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: "dropdown",
        "enter-active-class": "transition-all",
        "leave-active-class": "transition-all",
        "enter-from-class": "opacity-0 scale-95",
        "leave-to-class": "opacity-0 scale-95"
      }, {
        default: withCtx(() => [
          unref(show) ? (openBlock(), createElementBlock("div", {
            key: 0,
            absolute: "",
            "z-100": "",
            "min-w-100px": "",
            rounded: "",
            "p-2": "",
            "shadow-lg": "",
            "bg-base": "",
            class: normalizeClass([_ctx.position === "left" ? "left-0" : "right-0"])
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item) => {
              return openBlock(), createElementBlock("div", {
                key: `${item}`
              }, [
                renderSlot(_ctx.$slots, "item", { item })
              ]);
            }), 128))
          ], 2)) : createCommentVNode("", true)
        ]),
        _: 3
      });
    };
  }
});

/* Injected with object hook! */

const _hoisted_1$1 = { "w-full": "" };
const _hoisted_2$1 = {
  border: "b base",
  "text-left": "",
  "leading-8": ""
};
const _hoisted_3$1 = ["rowspan"];
const _hoisted_4$1 = ["colspan"];
const _hoisted_5$1 = {
  flex: "",
  "items-center": "",
  "justify-between": ""
};
const _hoisted_6$1 = /* @__PURE__ */ createBaseVNode("span", null, "Route Meta", -1);
const _hoisted_7$1 = /* @__PURE__ */ createBaseVNode("i", { "mingcute:filter-fill": "" }, null, -1);
const _hoisted_8$1 = [
  _hoisted_7$1
];
const _hoisted_9$1 = {
  flex: "",
  "items-center": "",
  gap2: "",
  truncate: "",
  p5px: "",
  "font-normal": "",
  "leading-none": ""
};
const _hoisted_10 = ["value"];
const _hoisted_11 = { b: "t-1px gray/20" };
const _hoisted_12 = {
  "w-20": "",
  "pr-1": ""
};
const _hoisted_13 = {
  flex: "",
  "items-center": "",
  "justify-end": ""
};
const _hoisted_14 = {
  flex: "inline gap3",
  "items-center": ""
};
const _hoisted_15 = {
  "w-30": "",
  "ws-nowrap": "",
  "pr-1": "",
  op50: ""
};
const _hoisted_16 = {
  key: 1,
  "w-50": "",
  "ws-nowrap": "",
  "pr-1": "",
  op50: "",
  hover: "text-primary op100"
};
const _hoisted_17 = ["title", "onClick"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "RoutesTable",
  props: {
    pages: {},
    matched: {},
    matchedPending: {}
  },
  emits: ["navigate", "selectMeta"],
  setup(__props) {
    const props = __props;
    const sorted = computed(() => {
      return [...props.pages].sort((a, b) => a.path.localeCompare(b.path));
    });
    function metaToString(meta, num = 0) {
      const metaStr = JSON.stringify(meta, null, num);
      return metaStr === "{}" ? "-" : metaStr;
    }
    const allMetaKeys = computed(() => tryGetAllMetaKeys(props.pages));
    const activeMetaKeys = useStorage(
      "__vue-devtools-route-active-meta-keys__",
      [],
      localStorage
    );
    watch(allMetaKeys, (v) => {
      activeMetaKeys.value = activeMetaKeys.value.filter((key) => v.includes(key));
    });
    const dynamicTableColumns = computed(() => activeMetaKeys.value.map((key) => ({
      head: `meta.${key}`,
      key
    })));
    const tableHeadMeta = computed(() => {
      return {
        normal: activeMetaKeys.value ? 2 : 1,
        dynamic: activeMetaKeys.value.length
      };
    });
    const normalHead = ["", "Route Path", "Name"];
    const showDynamicSelector = ref(false);
    const dynamicSelectorEl = ref();
    onClickOutside(dynamicSelectorEl, () => {
      showDynamicSelector.value = false;
    });
    return (_ctx, _cache) => {
      const _component_VDDropdown = _sfc_main$2;
      const _component_VDBadge = __unplugin_components_1;
      const _component_RoutePathItem = _sfc_main$3;
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("table", _hoisted_1$1, [
          createBaseVNode("thead", _hoisted_2$1, [
            createBaseVNode("tr", null, [
              (openBlock(), createElementBlock(Fragment, null, renderList(normalHead, (head) => {
                return createBaseVNode("th", {
                  key: head,
                  rowspan: unref(tableHeadMeta).normal
                }, toDisplayString(head), 9, _hoisted_3$1);
              }), 64)),
              unref(allMetaKeys).length ? (openBlock(), createElementBlock("th", {
                key: 0,
                colspan: unref(tableHeadMeta).dynamic
              }, [
                createBaseVNode("div", _hoisted_5$1, [
                  _hoisted_6$1,
                  createBaseVNode("div", {
                    ref_key: "dynamicSelectorEl",
                    ref: dynamicSelectorEl,
                    relative: ""
                  }, [
                    createBaseVNode("button", {
                      text: "xs gray-400",
                      relative: "",
                      onClick: _cache[0] || (_cache[0] = () => showDynamicSelector.value = !unref(showDynamicSelector))
                    }, _hoisted_8$1),
                    createVNode(_component_VDDropdown, {
                      show: unref(showDynamicSelector),
                      "onUpdate:show": _cache[2] || (_cache[2] = ($event) => isRef(showDynamicSelector) ? showDynamicSelector.value = $event : null),
                      "top-40px": "",
                      "w-200px": "",
                      items: unref(allMetaKeys),
                      position: "right"
                    }, {
                      item: withCtx(({ item }) => [
                        createBaseVNode("div", _hoisted_9$1, [
                          withDirectives(createBaseVNode("input", {
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(activeMetaKeys) ? activeMetaKeys.value = $event : null),
                            "cursor-pointer": "",
                            type: "checkbox",
                            value: item
                          }, null, 8, _hoisted_10), [
                            [vModelCheckbox, unref(activeMetaKeys)]
                          ]),
                          createBaseVNode("span", null, toDisplayString(item), 1)
                        ])
                      ]),
                      _: 1
                    }, 8, ["show", "items"])
                  ], 512)
                ])
              ], 8, _hoisted_4$1)) : createCommentVNode("", true)
            ]),
            createBaseVNode("tr", _hoisted_11, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(dynamicTableColumns), ({ head, key }) => {
                return openBlock(), createElementBlock("th", { key }, toDisplayString(head), 1);
              }), 128))
            ])
          ]),
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(sorted), (item) => {
              return openBlock(), createElementBlock("tr", {
                key: item.name,
                class: "group",
                "h-7": "",
                border: "b dashed transparent hover:base",
                "text-left": "",
                "text-sm": "",
                "font-mono": ""
              }, [
                createBaseVNode("td", _hoisted_12, [
                  createBaseVNode("div", _hoisted_13, [
                    _ctx.matched.find((m) => m.path === item.path) ? (openBlock(), createBlock(_component_VDBadge, {
                      key: 0,
                      "bg-green-400:10": "",
                      "text-green-400": "",
                      title: "active",
                      textContent: "active"
                    })) : createCommentVNode("", true),
                    _ctx.matchedPending.find((m) => m.path === item.path) ? (openBlock(), createBlock(_component_VDBadge, {
                      key: 1,
                      "bg-teal-400:10": "",
                      "text-teal-400": "",
                      title: "next",
                      textContent: "next"
                    })) : createCommentVNode("", true)
                  ])
                ]),
                createBaseVNode("td", null, [
                  createBaseVNode("div", _hoisted_14, [
                    createVNode(_component_RoutePathItem, {
                      route: item,
                      class: normalizeClass(_ctx.matched.find((m) => m.path === item.path) ? "text-primary" : _ctx.matchedPending.find((m) => m.name === item.name) ? "text-teal" : ""),
                      hover: "text-primary",
                      onNavigate: _cache[3] || (_cache[3] = (path) => _ctx.$emit("navigate", path))
                    }, null, 8, ["route", "class"])
                  ])
                ]),
                createBaseVNode("td", _hoisted_15, toDisplayString(item.name ?? "-"), 1),
                unref(dynamicTableColumns).length ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(dynamicTableColumns), ({ key }) => {
                  return openBlock(), createElementBlock("td", {
                    key,
                    truncate: "",
                    "ws-nowrap": "",
                    op50: ""
                  }, toDisplayString(item.meta[key]?.toString() ?? "-"), 1);
                }), 128)) : (openBlock(), createElementBlock("td", _hoisted_16, [
                  createBaseVNode("span", {
                    "inline-block": "",
                    "w-50": "",
                    "cursor-pointer": "",
                    "overflow-hidden": "",
                    "text-ellipsis": "",
                    title: metaToString(item.meta, 2),
                    onClick: () => _ctx.$emit("selectMeta", item.meta)
                  }, toDisplayString(metaToString(item.meta)), 9, _hoisted_17)
                ]))
              ]);
            }), 128))
          ])
        ])
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1 = {
  "h-full": "",
  "of-auto": "",
  "n-panel-grids": ""
};
const _hoisted_2 = {
  border: "b base",
  flex: "~ col gap1",
  px4: "",
  py3: "",
  "navbar-glass": ""
};
const _hoisted_3 = /* @__PURE__ */ createBaseVNode("span", { op50: "" }, "Navigate from ", -1);
const _hoisted_4 = { "font-mono": "" };
const _hoisted_5 = /* @__PURE__ */ createBaseVNode("span", { op50: "" }, " to ", -1);
const _hoisted_6 = {
  key: 1,
  op50: ""
};
const _hoisted_7 = /* @__PURE__ */ createBaseVNode("span", null, [
  /* @__PURE__ */ createTextVNode("Press "),
  /* @__PURE__ */ createBaseVNode("b", { "font-bold": "" }, "Enter"),
  /* @__PURE__ */ createTextVNode(" to navigate")
], -1);
const _hoisted_8 = {
  key: 0,
  "text-orange": "",
  op75: ""
};
const _hoisted_9 = {
  key: 1,
  op50: ""
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "pages",
  setup(__props) {
    const routeInput = ref("");
    onMounted(() => {
      routeInput.value = currentRoute.value?.path ?? "/";
    });
    const routeInputMatched = computed(() => {
      if (routeInput.value === currentRoute.value?.path)
        return [];
      return router.value?.resolve({
        path: routeInput.value || "/"
      }).matched ?? [];
    });
    function navigate() {
      if (routeInput.value === currentRoute.value?.path)
        return;
      router.value?.push(routeInput.value || "/");
    }
    function navigateToRoute(path) {
      router.value?.push(path);
      routeInput.value = path;
    }
    const selectedMeta = ref();
    return (_ctx, _cache) => {
      const _component_VDTextInput = _sfc_main$5;
      const _component_RoutesTable = _sfc_main$1;
      const _component_RouteMetaDetail = _sfc_main$4;
      const _component_DrawerRight = _sfc_main$7;
      const _component_VDSectionBlock = __unplugin_components_3;
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createBaseVNode("div", _hoisted_2, [
          createBaseVNode("div", null, [
            unref(currentRoute)?.path !== unref(routeInput) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _hoisted_3,
              createBaseVNode("span", _hoisted_4, toDisplayString(unref(currentRoute)?.path), 1),
              _hoisted_5
            ], 64)) : (openBlock(), createElementBlock("span", _hoisted_6, "Current route"))
          ]),
          createVNode(_component_VDTextInput, {
            modelValue: unref(routeInput),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(routeInput) ? routeInput.value = $event : null),
            "font-mono": "",
            icon: "carbon-direction-right-01 scale-y--100",
            class: normalizeClass(unref(currentRoute)?.path === unref(routeInput) ? "" : unref(routeInputMatched).length ? "text-green" : "text-orange"),
            onKeydown: withKeys(navigate, ["enter"])
          }, null, 8, ["modelValue", "class", "onKeydown"]),
          createBaseVNode("div", null, [
            unref(currentRoute)?.path !== unref(routeInput) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _hoisted_7,
              !unref(routeInputMatched).length ? (openBlock(), createElementBlock("span", _hoisted_8, " (no match)")) : createCommentVNode("", true)
            ], 64)) : (openBlock(), createElementBlock("span", _hoisted_9, "Edit path above to navigate"))
          ])
        ]),
        createVNode(_component_VDSectionBlock, {
          icon: "carbon-tree-view-alt",
          text: "All Routes",
          description: `${unref(routes).length} routes registered in your application`,
          padding: "pr5"
        }, {
          default: withCtx(() => [
            createVNode(_component_RoutesTable, {
              pages: unref(routes),
              matched: unref(currentRoute)?.matched ?? [],
              "matched-pending": unref(routeInputMatched),
              onNavigate: navigateToRoute,
              onSelectMeta: _cache[1] || (_cache[1] = (meta) => selectedMeta.value = meta)
            }, null, 8, ["pages", "matched", "matched-pending"]),
            createVNode(_component_DrawerRight, {
              "model-value": !!unref(selectedMeta),
              "auto-close": "",
              "w-120": "",
              onClose: _cache[2] || (_cache[2] = ($event) => selectedMeta.value = void 0)
            }, {
              default: withCtx(() => [
                !!unref(selectedMeta) ? (openBlock(), createBlock(_component_RouteMetaDetail, {
                  key: 0,
                  meta: unref(selectedMeta)
                }, null, 8, ["meta"])) : createCommentVNode("", true)
              ]),
              _: 1
            }, 8, ["model-value"])
          ]),
          _: 1
        }, 8, ["description"])
      ]);
    };
  }
});

/* Injected with object hook! */

/* Injected with object hook! */

export { _sfc_main as default };
